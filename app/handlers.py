import asyncio
from gc import callbacks
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.date import DateTrigger
from datetime import datetime, timedelta
from app.database.models import User
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.types import Message, CallbackQuery
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import CommandStart, Command
import sqlite3
import app.keyboards as kb
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import app.database.requests as rq
from sqlalchemy import select
from app.database.models import async_session
from app.database.requests import get_liders
from aiogram.types import LabeledPrice, PreCheckoutQuery
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types.message import ContentType
PAYMENT_PROVIDER_TOKEN = "390540012:LIVE:62751"
router = Router()
import random

user_messages = {}

conn = sqlite3.connect('db.sqlite3')
cursor = conn.cursor()
bot = Bot(token='7885226501:AAFqfa4vmZ_FUOlAuSXa4-jUqcRriG7w1Qs')

supports_canal = '-1002427853005'

def is_number(s):
    try:
        float(s)
        return True
    except ValueError:
        return False

class Donat_xzizn(StatesGroup):
    restoration_balls = State()
    restoration_life = State()

class Support(StatesGroup):
    ansversupport = State()
    zacl = State()
class Otvetil(StatesGroup):
    vanswer = State()
    id_num = State()
    answer = State()
    number = State()

class Register(StatesGroup):
    login = State()
    age = State()
    whu = State()
    number = State()
    tg_id = State()
    referral = State()

active_timers = {}

async def reset_premium(user_id: int):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == user_id))
        if user:
            user.premium = 0
            await session.commit()
            print(f"–ü—Ä–µ–º–∏—É–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–±–Ω—É–ª—ë–Ω.")




# –§—É–Ω–∫—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫
async def start_timer_for_attempts(user_id):
    while True:
        cursor.execute("SELECT count_otvet_x FROM users WHERE tg_id = ?", (user_id,))
        count_otvet_x = int(cursor.fetchone()[0])
        if count_otvet_x == 0:
            count_otvet_x = 1
        await asyncio.sleep(1 * 3600 / count_otvet_x)  # –¢–∞–π–º–µ—Ä
        conn.commit()
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å–ª–æ–≤–Ω—ã–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        cursor.execute("""
                UPDATE users 
                SET count_otvet = CASE 
                                      WHEN count_otvet < 3 THEN count_otvet + 1  
                                   END 
                WHERE tg_id = ?;
            """, (user_id,))
        conn.commit()

        # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cursor.execute("SELECT count_otvet FROM users WHERE tg_id = ?", (user_id,))
        count_otvet = int(cursor.fetchone()[0])

        if count_otvet >= 3:
            active_timers.pop(user_id, None)
            break




@router.message(F.photo)
async def photo_handler(message: Message):
    photo_data = message.photo[-1]
    await message.answer(f'{photo_data.file_id}')

@router.message(F.document)
async def document_handler(message: Message):
    document = message.document  # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞
    file_id = document.file_id  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
    file_name = document.file_name  # –ò–º—è —Ñ–∞–π–ª–∞

    await message.answer(f'–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\nüìÑ File ID: `{file_id}`\nüìÇ File Name: `{file_name}`', parse_mode="Markdown")


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        return
    await message.answer(f'üëã –í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PLAYEX ‚Äì –≤–∞—à–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ —É—á–µ–±–µ! –ú—ã –ø–æ–Ω–∏–º–∞–µ–º, —á—Ç–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π –∏ —É—Ç–æ–º–∏—Ç–µ–ª—å–Ω–æ–π, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ –≤–∞—à —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –æ–±—ä—è—Å–Ω—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è —Ç–∞–∫, –∫–∞–∫ –Ω—É–∂–Ω–æ.'
                         f'\n\nüìö –£—Å—Ç–∞–ª–∏ –æ—Ç —Å–∫—É—á–Ω–æ–π —É—á—ë–±—ã? –ü–ª–æ—Ö–æ —É—Å–≤–∞–∏–≤–∞–µ—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª? –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –º—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º! '
                         f'\n\nüéÆ –ó–∞–Ω–∏–º–∞–π—Ç–µ—Å—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–æ–π –∫ –û–ì–≠ –∏ –ï–ì–≠ —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º, –∏–≥—Ä–∞—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ! –° –Ω–∞–º–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –Ω–∞–≤—ã–∫–∏ –≤ –∏–≥—Ä–æ–≤–æ–π —Ñ–æ—Ä–º–µ, —á—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—É—á–µ–Ω–∏—è —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º. '
                         f'\n\n‚ú® –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ PLAYEX –∏ –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–µ–µ —É—á–µ–±–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è!', reply_markup = kb.main)




@router.message(Command('help'))
async def cmd_start(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        return
    await message.answer('–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã/–ø—Ä–æ–±–ª–µ–º—ã —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º –∏–ª–∏ –ø–æ—è–≤–∏–ª–æ—Å—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, —Ç–æ –º–æ–∂–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º –≤ –ø—É–Ω–∫—Ç–µ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n(–µ—Å–ª–∏ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å, —Ç–æ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ–≥—Ä–∞–º–º–∞)\n'
                         '\n/start - –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n'
                         '\n/register - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '\n/menu –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n')

@router.message(Command('register'))
async def reg(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
    if not user:
        await state.set_state(Register.login)
        await state.update_data(tg_id = message.from_user.id)
        await message.answer('üé≠–ü—Ä–∏–¥—É–º–∞–π —Å–µ–±–µ –∫—Ä—É—Ç–æ–π –Ω–∏–∫–Ω–µ–π–º!\n'
                             '–û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–∞–±–ª–∏—Ü–µ –ª–∏–¥–µ—Ä–æ–≤, —Ç–∞–∫ —á—Ç–æ –≤—ã–±–∏—Ä–∞–π –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–π—Å—è!',reply_markup=types.ReplyKeyboardRemove())
    else:
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã')

@router.message(Register.login)
async def reg_login(message: Message, state: FSMContext):
    async with async_session() as session:
        user_loggin = await session.scalar(select(User).where(User.name == message.text))
    if (len(message.text) > 15) or ('@' in message.text) or ('/' in message.text) or (' ' in message.text):
        await message.answer('üö´–ö–∞–∂–µ—Ç—Å—è —Ç–≤–æ–π –Ω–∏–∫–Ω–µ–π–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –û–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –ø—Ä–æ–±–µ–ª—ã, –∞ —Ç–∞–∫–∂–µ —Å–∏–º–≤–æ–ª—ã / –∏ @.üö´'
                             '\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.')

    elif user_loggin:
        await message.answer('üö´ –£–ø—Å! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ. –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å! üòä')
    else:
        await state.update_data(login = message.text)
        await state.set_state(Register.age)
        await message.answer('üë§–í–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Å–¥–µ–ª–∞—Ç—å –∏–≥—Ä—É –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ!')

@router.message(Register.age)
async def reg_age(message: Message, state: FSMContext):
    if not is_number(message.text):
        await message.answer('‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–∞–º–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —á–∏—Å–ª–∞.')
    else:
        await state.update_data(age=message.text)
        await state.set_state(Register.referral)
        await message.answer('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –¥—Ä—É–≥–∞, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ —Å–µ–π—á–∞—Å.\n'
                             '‚ùó–ï—Å–ª–∏ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç".')

@router.message(Register.referral)
async def reg_referral(message: Message, state: FSMContext):
    referral_nickname = message.text
    if referral_nickname.lower() == '–Ω–µ—Ç':
        referral_nickname = None
    else:
        async with async_session() as session:
            ref_user = await session.scalar(select(User).where(User.name == referral_nickname))
            if not ref_user:
                await message.answer('üö´ –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç".')
                return
            else:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
                ref_user.invited_count += 1
                ref_user.balls += 20
                session.add(ref_user)
                await session.commit()
                await message.answer(f'üéâ –í—ã —É–∫–∞–∑–∞–ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {referral_nickname}, –∏ –µ–º—É –Ω–∞—á–∏—Å–ª–µ–Ω—ã –±–æ–Ω—É—Å—ã!')

    await state.update_data(referral_nickname=referral_nickname)
    await state.set_state(Register.whu)
    await message.answer('üë®‚Äçüéì–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ: –±—É–¥–µ—à—å —É—á–µ–Ω–∏–∫–æ–º –∏–ª–∏ —É—á–∏—Ç–µ–ª–µ–º?\n–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–≤–æ–π –æ–ø—ã—Ç. –°–ø–∞—Å–∏–±–æ! üòä', reply_markup=kb.iam)


@router.message(Register.whu)
async def reg_whu(message: Message, state: FSMContext):
    if message.text != '–£—á–∏—Ç–µ–ª—å' and message.text != '–£—á–µ–Ω–∏–∫':
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤—ã—Ä–∏–∞–Ω—Ç–æ–≤')
    else:
        await state.update_data(whu = message.text)
        await state.set_state(Register.number)
        await message.answer('üì± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å. –°–ø–∞—Å–∏–±–æ!', reply_markup=kb.get_number)

@router.message(Register.number, F.contact)
async def reg_number(message: Message, state: FSMContext):

    await state.update_data(number=message.contact.phone_number)
    data = await state.get_data()
    global last_message
    last_message = await message.answer(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –¢–µ–ø–µ—Ä—å —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Ä–µ—à–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–∞–¥–∞—á–∏! –£–¥–∞—á–∏!'
                                        f'',reply_markup=kb.main)
    cursor.execute(
        "INSERT INTO users (tg_id, name, age, count_otvet, whuare, number, premium, balls, solved_tasks, balance, count_otvet_x, balls_x, level, referral_nickname, invited_count) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
        (data['tg_id'], data['login'], data['age'], 6, data['whu'], data['number'], 0, 0, 0, 0, 0, 0, 0,
         data.get('referral_nickname'), 0)
    )
    conn.commit()

    await state.clear()

@router.message(F.text == '–ú–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂')
async def lk(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
    if not user:
        new_message = await message.answer('–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
    else:
        new_message = await message.answer('–í—ã –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ', reply_markup=kb.lk)
    user_messages[user_id] = [message.message_id, new_message.message_id]


@router.message(F.text == '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è')
async def daily_tasks(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
    if not user:
        new_message = await message.answer('–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
    else:
        new_message = await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', reply_markup=kb.zd)
    user_messages[user_id] = [message.message_id, new_message.message_id]


@router.message(F.text == '–†–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏')
async def daily_tasks_one(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    cursor.execute("SELECT count_otvet FROM users WHERE tg_id = ?",
                   (message.from_user.id,))
    result = cursor.fetchone()
    count_otvet = int(result[0])
    conn.commit()
    user_id = message.from_user.id
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    if count_otvet > 0:

        new_message = await message.answer(f'–í—ã–±–∏—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç', reply_markup=await kb.materialcategorii())
    else:
        new_message = await message.answer(
            'üö´ –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–æ–≥–æ –¥–ª—è –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–π\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üòä',
            reply_markup=await kb.glavn())
    user_messages[user_id] = [message.message_id, new_message.message_id]


@router.callback_query(F.data.startswith('category_'))
async def maretialcotegori(callback: CallbackQuery):
    await callback.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏  –ø—Ä–µ–¥–º–µ—Ç')


    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä", reply_markup = await kb.materials(callback.data.split('_')[1]))







@router.callback_query(F.data.startswith('material_'))
async def materialcotegori(callback: CallbackQuery, state: FSMContext):
    user_id = callback.message.from_user.id
    data = await state.get_data()
    await callback.message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    material_data = await rq.get_material(callback.data.split('_')[1])
    if material_data.materialcat == 2 and material_data.name == '–ù–æ–º–µ—Ä 1-5':
        file_data = await rq.get_photo(callback.data.split('_')[1])
        file_data2 = await rq.get_photo(callback.data.split('_')[1])
        await state.update_data(number=material_data.materialcat)
        rand_file = []
        await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä')
        for file in file_data:
            rand_file.append((file.photo, file.answer, file.id))
        random_file = random.choice(rand_file)

        await state.update_data(vanswer= random_file[1])
        id_num = random_file[2]
        await state.set_state(Otvetil.answer)
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {material_data.name}\n'
                                      f'#{id_num} {material_data.description}\n–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                      reply_markup=types.ReplyKeyboardRemove())
        await callback.message.answer_document(document=random_file[0])
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')
    else:

        photo_data = await rq.get_photo(callback.data.split('_')[1])
        photo_data2 = await rq.get_photo(callback.data.split('_')[1])
        await state.update_data(number=material_data.materialcat)
        rand_photo = []
        await callback.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–æ–º–µ—Ä')
        for photo in photo_data:
            rand_photo.append(photo.photo)
        randomphoto = random.choice(rand_photo)
        await callback.message.answer_photo(photo = randomphoto)
        for i in photo_data2:
            if randomphoto == i.photo:
                await state.update_data(vanswer = i.answer)
                id_num = i.id
        await state.set_state(Otvetil.answer)
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {material_data.name}\n'
                                      f'#{id_num} {material_data.description}\n–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:',
                                      reply_markup=types.ReplyKeyboardRemove())
        await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç:')

@router.message(Otvetil.answer)
async def his_answer(message: Message, state: FSMContext):
    cursor.execute("SELECT count_otvet FROM users WHERE tg_id = ?", (message.from_user.id,))
    result = cursor.fetchone()
    count_otvet = float(result[0]) if result else 0
    conn.commit()
    user_id = message.from_user.id

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(answer=message.text)
    data = await state.get_data()
    if data['vanswer'] == data['answer'] and count_otvet > 1:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        cursor.execute("SELECT balls, solved_tasks, balls_x FROM users WHERE tg_id = ?", (user_id,))
        result = cursor.fetchone()
        your_balls = int(result[2]) if result else 0
        solved_tasks = int(result[1]) if result else 0
        balls = float(result[0])
        solved_tasks += 1
        if your_balls > 0:
            balls += your_balls
        else:
            your_balls = 1
            balls += 1
        cursor.execute("UPDATE users SET balls = ?, solved_tasks = ? WHERE tg_id = ?", (balls, solved_tasks, user_id))
        conn.commit()

        new_message = await message.answer(
            f'üéâ –û—Ç–ª–∏—á–Ω–æ! –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç! üéâ\n–í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {your_balls}! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
            reply_markup=await kb.materials(data['number'])
        )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()
    elif data['vanswer'] != data['answer'] and count_otvet > 1:
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
        cursor.execute("UPDATE users SET count_otvet = count_otvet - 1 WHERE tg_id = ?", (user_id,))

        conn.commit()

        cursor.execute("SELECT solved_tasks FROM users WHERE tg_id = ?", (user_id,))
        solved_tasks = int(cursor.fetchone()[0])
        solved_tasks += 1
        cursor.execute("UPDATE users SET solved_tasks = ? WHERE tg_id = ?", (solved_tasks, user_id))
        conn.commit()

        new_message = await message.answer(
            f'üòø –£–ø—Å! –û—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. üòø\n–£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å {count_otvet - 1} –ø–æ–ø—ã—Ç–æ–∫. –ù–µ –æ—Ç—á–∞–∏–≤–∞–π—Ç–µ—Å—å –∏ –ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞! üí™',
            reply_markup=await kb.materials(data['number'])
        )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in active_timers:
            active_timers[user_id] = asyncio.create_task(start_timer_for_attempts(user_id))
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞, –µ—Å–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å
        cursor.execute("UPDATE users SET count_otvet = 0 WHERE tg_id = ?", (user_id,))
        conn.commit()

        new_message = await message.answer(
            'üòø –û—Ç–≤–µ—Ç –Ω–µ –≤–µ—Ä–Ω—ã–π üòø\n'
            'üö´ –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–æ–≥–æ –¥–ª—è –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–π\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É üòä',
            reply_markup=await kb.glavn()
        )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()

        # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if user_id not in active_timers:
            active_timers[user_id] = asyncio.create_task(start_timer_for_attempts(user_id))

@router.callback_query(F.data.startswith('to_main'))
async def nazad(callback: CallbackQuery):
    user_id = callback.message.from_user.id
    await callback.message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    await callback.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    new_message = await callback.message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= kb.main)
    user_messages[user_id] = [callback.message.message_id, new_message.message_id]

@router.message(Command('menu'))
async def menu(message: Message):
    user_id = message.from_user.id
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    new_message = await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= kb.main)
    user_messages[user_id] = [message.message_id, new_message.message_id]


@router.message(F.text == '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
async def support(message: Message,state: FSMContext):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    user_id = message.from_user.id
    try:
        await message.delete()
    except Exception:
        pass
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == user_id))

    if not user:
        new_message = await message.answer('–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
    else:
        new_message = await message.answer('üí¨ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–∞–º –æ –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º–µ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n–ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –∏ —Ü–µ–Ω–∏–º –≤–∞—à –æ—Ç–∑—ã–≤!')

        await state.set_state(Support.ansversupport)
    user_messages[user_id] = [new_message.message_id]


@router.message(Support.ansversupport)
async def supportansver(message: Message,state: FSMContext):
    await state.update_data(ansversupport=message.text)
    data = await state.get_data()
    await message.forward(supports_canal)
    await message.answer(
        f'–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n{data['ansversupport']}\nüë§ –ù–∞—à –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –≤—Å–∫–æ—Ä–µ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ä–µ—à–∏—Ç—å –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É.\n–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ!'
        f'\n(–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ª–∏—á–Ω–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –ø–∏—Å–∞—Ç—å –≤–∞–º –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ.')
    await state.clear()


@router.message(F.text == '–¢–∞–±–ª–∏—Ü–∞ –ª–∏–¥–µ—Ä–æ–≤')
async def support(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
    if not user:
        new_message = await message.answer('–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
    else:
        top_balls_user = await get_liders()
        msg = ''
        max_users_balls = 10
        id_count = 0
        for name_user, balls_usser in top_balls_user:
            id_count += 1
            if id_count <= max_users_balls:
                msg += f'{id_count}) {name_user} -- {balls_usser} –±–∞–ª–ª–∞(–æ–≤)\n'
            else:
                break
        new_message = await message.answer(f'–¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{msg}')
    user_messages[user_id] = [message.message_id, new_message.message_id]

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
async def gl(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    new_message = await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup= kb.main)
    user_messages[user_id] = [message.message_id, new_message.message_id]

@router.message(F.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥')
async def back_button(message: types.Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
        new_message = await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞–∑–∞–¥", reply_markup=kb.lk)
        user_messages[user_id] = [message.message_id, new_message.message_id]



@router.message(F.text == '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞')
async def stats(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
        async with async_session() as session:
            user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if not user:
            new_message = await message.answer(
                '–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
        else:
            cursor.execute("SELECT name, age, whuare, number, premium, balls, solved_tasks,level, count_otvet_x, balls_x, balance FROM users WHERE tg_id = ?",
                           (message.from_user.id,))
            result = cursor.fetchone()
            name = str(result[0])
            age = int(result[1])
            whuare = str(result[2])
            number = int(result[3])
            premium = int(result[4])
            balls = int(result[5])
            solved_tasks = int(result[6])
            level = str(result[7])
            count_otvet_x = str(result[8])
            balls_x = str(result[9])
            balance = str(result[10])
            conn.commit()
            your_premium = ''
            if premium == 0:
                your_premium = 'üö´ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.'
            elif premium == 1:
                your_premium = '–ü–æ–¥–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞'
            new_message = await message.answer(f'–ù–∏–∫–Ω–µ–π–º: {name}({whuare})\n'
                                 f'–í–æ–∑—Ä–∞—Å—Ç: {age}\n'
                                 f'–¢–µ–ª–µ—Ñ–æ–Ω: {number}\n'
                                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {solved_tasks}\n'
                                 f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤: {balls}\n'
                                 f'–£—Ä–æ–≤–µ–Ω—å: {level}\n'
                                 f'X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∂–∏–∑–Ω–∏: {count_otvet_x}\n'
                                 f'X –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –±–∞–ª–ª–æ–≤: {balls_x}\n'
                                 f'–ë–∞–ª–∞–Ω—Å: {balance}\n'
                                 f'{your_premium}', reply_markup=kb.lk)
        user_messages[user_id] = [message.message_id, new_message.message_id]


@router.message(Command('pay'))
async def send_payment_options(message: types.Message):
    user_id = message.from_user.id

    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
    if not user:
        new_message = await message.answer(
            '–û–≥–æ! –ö–∞–∂–µ—Ç—Å—è, —Ç—ã –µ—â–µ –Ω–µ –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!\nüòâ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ó–∞–π–º—ë—Ç –≤—Å–µ–≥–æ –º–∏–Ω—É—Ç—É! üöÄ\n/register')
    else:
        new_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb.donat)
    user_messages[user_id] = [message.message_id, new_message.message_id]

@router.message(F.text == '–î–æ–Ω–∞—Ç')
async def send_payment_options(message: types.Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    new_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=kb.donat)
    user_messages[user_id] = [message.message_id, new_message.message_id]


@router.callback_query(lambda callback: callback.data.startswith("pay_"))
async def send_invoice(callback: types.CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ callback.data
        amount1 = int(callback.data.split("_")[1])
        print(f"–°—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {amount1}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ–±—ã —Å—É–º–º–∞ –±—ã–ª–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π
        if amount1 <= 0:
            await callback.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!", show_alert=True)
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ü–µ–Ω—ã –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        prices = [
            LabeledPrice(label=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ({amount1} —Ä—É–±)", amount=amount1 * 100)
        ]
        print(prices)
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º invoice
        await callback.message.delete()
        await bot.send_invoice(
            chat_id=callback.message.chat.id,
            title="–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
            description=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount1} —Ä—É–±",
            payload=f"user_{callback.from_user.id}_{amount1}",  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
            provider_token=PAYMENT_PROVIDER_TOKEN,  # –¢–æ–∫–µ–Ω –Æ–∫–∞—Å—Å—ã
            currency="RUB",  # –í–∞–ª—é—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 4217
            prices=prices,
            start_parameter="pay",
        )
        await callback.answer()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

@router.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

@router.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    payment_info = message.successful_payment
    amount = payment_info.total_amount / 100
    if amount == 99:
        cursor.execute(
            "SELECT premium FROM users WHERE tg_id = ?",
            (message.from_user.id,))
        result = cursor.fetchone()
        premium_user = int(result[0])
        if premium_user == 0:
            cursor.execute("UPDATE users SET premium = 1 WHERE tg_id = ?",
                           (message.from_user.id,))
            conn.commit()
            # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á–∏ –Ω–∞ –æ–±–Ω—É–ª–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º–∞ —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π
            scheduler = AsyncIOScheduler()
            reset_time = datetime.now() + timedelta(days=30)
            scheduler.add_job(
                reset_premium,
                trigger=DateTrigger(run_date=reset_time),
                kwargs={"user_id": message.from_user.id},
            )
            scheduler.start()

            await message.answer(
                "üéâ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–º–∏—É–º –Ω–∞ 1 –º–µ—Å—è—Ü. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!"
            )
        else:
            cursor.execute("UPDATE users SET balance = balance + 99 WHERE tg_id = ?",
                           (message.from_user.id,))
            conn.commit()
            await message.answer(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞, –¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–∏–Ω—ã –≤–∞–º –Ω–∞ –±–∞–ª–∞–Ω—Å"
            )
    else:



        cursor.execute("UPDATE users SET balance = balance + ? WHERE tg_id = ?",
                       (amount, message.from_user.id,))
        conn.commit()
        await message.answer(f" üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {amount} —Ä—É–±. –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–∏—Ö —É—Å–ª—É–≥!")


@router.message(F.text == '–ñ–∏–∑–Ω–∏')
async def donat_life1(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return

    await message.delete()

    new_message = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π:", reply_markup=kb.donat_life)

    user_messages[user_id] = [message.message_id, new_message.message_id]




@router.callback_query(lambda callback: callback.data.startswith("payl_"))
async def donat_life2(callback: types.CallbackQuery):
    user_id = callback.message.from_user.id
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    try:
        amount = int(callback.data.split("_")[1])
        cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (callback.from_user.id,))
        result = cursor.fetchone()
        if result is None:
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        balance = int(result[0])
        required_balance = {1: 9, 3: 19, 6: 28, 9: 35}.get(amount)

        if required_balance is None:
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞.", show_alert=True)
            return

        if balance >= required_balance:
            balance -= required_balance
            cursor.execute("UPDATE users SET balance = ?, count_otvet = count_otvet + ? WHERE tg_id = ?",
                           (balance, amount, callback.from_user.id,))
            conn.commit()
            await callback.answer(f"üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {required_balance} —Ä—É–±.", show_alert=True)
        else:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ.\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ {required_balance} —Ä—É–±.\n–ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π\n/pay.", show_alert=True)
    except Exception as e:
        await callback.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", show_alert=True)

@router.message(F.text == '–ü—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏')
async def ability(message: Message):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    cursor.execute("SELECT count_otvet, count_otvet_x, balls_x, balance, balls FROM users WHERE tg_id = ?",
                   (message.from_user.id,))
    result = cursor.fetchone()
    count_otvet = int(result[0])
    count_otvet_x = str(result[1])
    balls_x = str(result[2])
    balance = int(result[3])
    balls = str(result[4])
    new_message = await message.answer(f'–í–∞—à–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n'
                                 f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π: {count_otvet}\n'
                                 f'–ë–æ–Ω—É—Å –∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∂–∏–∑–Ω–∏: {count_otvet_x}\n'
                                 f'–ë–æ–Ω—É—Å –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –±–∞–ª–ª–æ–≤:{balls_x}\n'
                                 f'\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤:{balls}'
                                 f'\n–ë–∞–ª–∞–Ω—Å: {balance}\n'
                                 f'\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∫–∞—á–∞—Ç—å:\n'
                                 f'1. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–∏: –£–≤–µ–ª–∏—á—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π!\n'
                                 f'2. –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤: –ü–æ–ª—É—á–∞–π—Ç–µ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∑–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!\n\n–í–∞—à –≤—ã–±–æ—Ä?', reply_markup=kb.ability)
    user_messages[user_id] = [message.message_id, new_message.message_id]
    conn.commit()

@router.message(F.text == 'X –∫ —É–≤–µ–ª–∏—á–µ–Ω–∏—é –±–∞–ª–ª–æ–≤')
async def ability(message: Message,state: FSMContext):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
        cursor.execute("SELECT balls_x FROM users WHERE tg_id = ?",
                       (message.from_user.id,))
        result = cursor.fetchone()
        balls_x = float(result[0])
        upgrade_costs_balls = {
            0: (45, 1.2),
            1.2: (75, 1.4),
            1.4: (145, 1.8),
            1.8: (225, 2.0),
        }
        next_level_cost_balls, next_level_value_balls = upgrade_costs_balls.get(float(balls_x),
                                                              (0, 0))
        upgrade_costs_pay = {
            0: (9, 1.2),
            1.2: (15, 1.4),
            1.4: (29, 1.8),
            1.8: (45, 2.0),
        }
        next_level_cost_pay, next_level_value_pay = upgrade_costs_pay.get(float(balls_x),
                                                                                (0, 0))
        if next_level_cost_balls <= 0:
            new_message = await message.answer(
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å X {balls_x} –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤\n'
                f'–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n',
                reply_markup=kb.pump)
        else:
            new_message = await message.answer(
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å X {balls_x} –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤'
                f'\n–°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {next_level_value_pay}'
                f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞ –±–∞–ª–ª—ã: {next_level_cost_balls}'
                f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞ –¥–æ–Ω–∞—Ç: {next_level_cost_pay}'
                f'\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞—à–∏ –±–∞–ª–ª—ã (–¥–æ–Ω–∞—Ç —Ä—É–±–ª–∏) –±—É–¥—É—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞!',
                reply_markup=kb.pump)
        conn.commit()
        await state.set_state(Donat_xzizn.restoration_balls)
        user_messages[user_id] = [message.message_id, new_message.message_id]

@router.message(Donat_xzizn.restoration_balls)
async def restoration_of_balls(message: Message,state: FSMContext):
    user_id = message.from_user.id
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    cursor.execute("SELECT balls_x, balls,balance FROM users WHERE tg_id = ?",
                   (message.from_user.id,))
    result = cursor.fetchone()
    balls_x = float(result[0])
    balls = int(result[1])
    balance = int(result[2])
    upgrade_costs_balls = {
        0: (45, 1.2),
        1.2: (75, 1.4),
        1.4: (145, 1.8),
        1.8: (225, 2.0),
    }
    next_level_cost_balls, next_level_value_balls = upgrade_costs_balls.get(float(balls_x),
                                                                            (0, 0))
    upgrade_costs_pay = {
        0: (9, 1.2),
        1.2: (15, 1.4),
        1.4: (29, 1.8),
        1.8: (45, 2.0),
    }
    next_level_cost_pay, next_level_value_pay = upgrade_costs_pay.get(float(balls_x),
                                                                      (0, 0))

    if message.text == '–ó–∞ –±–∞–ª–ª—ã':
        if next_level_cost_balls > 0 and balls >= next_level_cost_balls:
            balls -= next_level_cost_balls
            balls_x = next_level_value_balls

            cursor.execute(
                "UPDATE users SET balls_x = ?, balls = ? WHERE tg_id = ?",
                (balls_x, balls, message.from_user.id,)
            )
            conn.commit()
            await state.clear()
            new_message = await message.answer(
                f"–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤!\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç {balls_x} –±–∞–ª–ª–∞.\n"
                f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–ª–ª—ã: {balls}", reply_markup=kb.ability
            )
        else:
            new_message = await message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏. –£ –≤–∞—Å {balls} –±–∞–ª–ª–æ–≤. "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫–∞—á–∫–∏: {next_level_cost_balls} –±–∞–ª–ª–æ–≤." if next_level_cost_balls > 0 else "üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–î–∞–ª—å—à–µ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. üòä",
                reply_markup=kb.ability
            )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()


    if message.text == '–ó–∞ –¥–æ–Ω–∞—Ç':
        if next_level_cost_pay > 0 and balance >= next_level_cost_pay:
            balance -= next_level_cost_pay
            balls_x = next_level_value_pay

            cursor.execute(
                "UPDATE users SET balls_x = ?, balance = ? WHERE tg_id = ?",
                (balls_x, balance, message.from_user.id,)
            )
            conn.commit()
            await state.clear()
            new_message = await message.answer(
                f"–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤!\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç {balls_x} –±–∞–ª–ª–∞.\n"
                f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: {balance}", reply_markup=kb.ability
            )
        else:
            new_message = await message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏. –£ –≤–∞—Å {balance} —Ä—É–±–ª–µ–π. "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫–∞—á–∫–∏: {next_level_cost_pay} –±–∞–ª–ª–æ–≤." if next_level_cost_pay > 0 else "üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–î–∞–ª—å—à–µ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. üòä",
                reply_markup=kb.ability
            )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()



@router.message(F.text == 'X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∂–∏–∑–Ω–∏')
async def restoration_of_life(message: Message,state: FSMContext):
    user_id = message.from_user.id
    if any(user_id in pair for pair in active_games.keys()):
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è.‚õî")
        return
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
        cursor.execute("SELECT count_otvet_x FROM users WHERE tg_id = ?",
                       (message.from_user.id,))
        result = cursor.fetchone()
        count_otvet_x = str(result[0])
        upgrade_costs_balls1 = {
            0: (25, 1.25),
            1.25: (45, 1.5),
            1.5: (99, 2.0),
            2.0: (135, 2.5),
            2.5: (160, 3.0),

        }
        next_level_cost_balls1, next_level_value_balls1 = upgrade_costs_balls1.get(float(count_otvet_x),
                                                                                (0, 0))
        upgrade_costs_pay1 = {
            0: (9, 1.25),
            1.25: (15, 1.5),
            1.5: (29, 2.0),
            2.0: (35, 2.5),
            2.5: (51, 3.0),
        }
        next_level_cost_pay1, next_level_value_pay1 = upgrade_costs_pay1.get(float(count_otvet_x),
                                                                          (0, 0))
        if next_level_cost_balls1 <= 0:
            new_message = await message.answer(
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å X {count_otvet_x} –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤\n'
                f'–≠—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n',
                reply_markup=kb.pump)
        else:
            new_message = await message.answer(
                f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å X {count_otvet_x} –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∂–∏–∑–Ω–µ–π'
                f'\n–°–ª–µ–¥—É—é—â–µ–µ —É–ª—É—á—à–µ–Ω–∏–µ: {next_level_value_pay1}'
                f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞ –±–∞–ª–ª—ã: {next_level_cost_balls1}'
                f'\n–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –∑–∞ –¥–æ–Ω–∞—Ç: {next_level_cost_pay1}'
                f'\nüí≥ –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, –∑–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–∫–∞—á–∞—Ç—å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤–∞—à–∏ –±–∞–ª–ª—ã (–¥–æ–Ω–∞—Ç —Ä—É–±–ª–∏) –±—É–¥—É—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–ø–∏—Å–∞–Ω—ã —Å –±–∞–ª–∞–Ω—Å–∞!',
                reply_markup=kb.pump)
        conn.commit()
        await state.set_state(Donat_xzizn.restoration_life)
        user_messages[user_id] = [message.message_id, new_message.message_id]

@router.message(Donat_xzizn.restoration_life)
async def restoration_of_life_one(message: Message,state: FSMContext):
    user_id = message.from_user.id
    await message.delete()
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []
    cursor.execute("SELECT count_otvet_x, balls,balance FROM users WHERE tg_id = ?",
                   (message.from_user.id,))
    result = cursor.fetchone()
    count_otvet_x = float(result[0])
    balls = int(result[1])
    balance = int(result[2])
    upgrade_costs_balls1 = {
        0: (25, 1.25),
        1.25: (45, 1.5),
        1.5: (99, 2.0),
        2.0: (135, 2.5),
        2.5: (160, 3.0),
    }
    next_level_cost_balls1, next_level_value_balls1 = upgrade_costs_balls1.get(count_otvet_x,
                                                                            (0, 0))

    upgrade_costs_pay1 = {
        0: (9, 1.25),
        1.25: (15, 1.5),
        1.5: (29, 2.0),
        2.0: (35, 2.5),
        2.5: (51, 3.0),
    }
    next_level_cost_pay1, next_level_value_pay1 = upgrade_costs_pay1.get(count_otvet_x,
                                                                      (0, 0))
    if message.text == '–ó–∞ –±–∞–ª–ª—ã':

        if next_level_cost_balls1 > 0 and balls >= next_level_cost_balls1:
            balls -= next_level_cost_balls1
            count_otvet_x = next_level_value_balls1

            cursor.execute(
                "UPDATE users SET count_otvet_x = ?, balls = ? WHERE tg_id = ?",
                (count_otvet_x, balls, message.from_user.id,)
            )
            conn.commit()
            await state.clear()
            new_message = await message.answer(
                f"–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –∂–∏–∑–Ω–∏!\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç {count_otvet_x} –±–∞–ª–ª–∞.\n"
                f"–û—Å—Ç–∞–≤—à–∏–µ—Å—è –±–∞–ª–ª—ã: {balls}", reply_markup=kb.ability
            )
        else:
            new_message = await message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏. –£ –≤–∞—Å {balls} –±–∞–ª–ª–æ–≤. "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫–∞—á–∫–∏: {next_level_cost_balls1} –±–∞–ª–ª–æ–≤." if next_level_cost_balls1 > 0 else f"üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–î–∞–ª—å—à–µ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. üòä", reply_markup=kb.ability
            )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()

    if message.text == '–ó–∞ –¥–æ–Ω–∞—Ç':
        if next_level_cost_pay1 > 0 and balance >= next_level_cost_pay1:
            balance -= next_level_cost_pay1
            count_otvet_x = next_level_value_pay1

            cursor.execute(
                "UPDATE users SET count_otvet_x = ?, balance = ? WHERE tg_id = ?",
                (count_otvet_x, balance, message.from_user.id,)
            )
            conn.commit()
            await state.clear()
            new_message = await message.answer(
                f"–í—ã –ø—Ä–æ–∫–∞—á–∞–ª–∏ X –∫ –≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é –±–∞–ª–ª–æ–≤!\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞ –∫–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç {count_otvet_x} –±–∞–ª–ª–∞.\n"
                f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: {balance}", reply_markup=kb.ability
            )
        else:
            new_message = await message.answer(
                f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏. –£ –≤–∞—Å {balance} —Ä—É–±–ª–µ–π. "
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–∫–∞—á–∫–∏: {next_level_cost_pay1} –±–∞–ª–ª–æ–≤." if next_level_cost_pay1 > 0 else "üéØ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–î–∞–ª—å—à–µ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è. üòä",
                reply_markup=kb.ability
            )
        user_messages[user_id] = [message.message_id, new_message.message_id]
        await state.clear()



async def check_premium_arena(user_id):
    cursor.execute("SELECT premium, count_otvet FROM users WHERE tg_id = ?",
                   (user_id,))
    result = cursor.fetchone()
    premium = int(result[0])
    count_otvet = float(result[1])
    conn.commit()
    if premium == 1:
        return 1
    if count_otvet >= 2.0 and premium == 0:
        return 2
    else:
        return 0


waiting_queue = {}
active_games = {}
active_players = set()

@router.message(F.text == '–ê—Ä–µ–Ω–∞')
async def arena(message: Message):
    user_id = message.from_user.id
    await message.delete()

    if user_id in active_players:
        await message.answer("‚õî–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è‚õî")
        return

    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
            except Exception:
                pass
        user_messages[user_id] = []

    if await check_premium_arena(user_id) == 2:
        new_message = await message.answer(
            f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞',
            reply_markup=await kb.arenacatalog())
        cursor.execute("UPDATE users SET count_otvet = count_otvet - 2 WHERE tg_id = ?", (message.from_user.id,))
        conn.commit()
    elif await check_premium_arena(user_id) == 1:
        new_message = await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–∞—Ç–µ—Ä–∏–∞–ª–∞', reply_markup=await kb.arenacatalog())
    else:
        new_message = await message.answer(
            f'üö´ –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –∞—Ä–µ–Ω–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.',
            reply_markup=kb.main)
    user_messages[user_id] = [message.message_id, new_message.message_id]

@router.callback_query(F.data.startswith('arenacategory_'))
async def select_category(callback: CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data.split('_')[1]

    if user_id in waiting_queue.get(category, []):
        await callback.message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å —Å–∞–º–∏–º —Å–æ–±–æ–π.")
        print(waiting_queue.get(category, []))
        return

    if category not in waiting_queue:
        waiting_queue[category] = []

    if waiting_queue[category]:
        opponent_id = waiting_queue[category].pop(0)

        if (user_id, opponent_id) in active_games or (opponent_id, user_id) in active_games:
            await callback.message.answer("–û—à–∏–±–∫–∞: —Å–æ–ø–µ—Ä–Ω–∏–∫ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–π –∏–≥—Ä–µ.")
            return

        active_games[(user_id, opponent_id)] = {
            "category": category,
            "tasks": [],
            "scores": {user_id: 0, opponent_id: 0},
        }
        active_players.add(user_id)
        active_players.add(opponent_id)

        await bot.send_message(user_id, f'üèÜ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏!', reply_markup=kb.leave)
        await bot.send_message(opponent_id, f'üèÜ –°–æ–ø–µ—Ä–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!\n–°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£–¥–∞—á–∏!', reply_markup=kb.leave)
        await send_task(user_id, opponent_id, category)
    else:
        waiting_queue[category].append(user_id)
        await callback.message.edit_text(
            "‚è≥ –ò—â–µ–º –¥–ª—è –≤–∞—Å –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞...", reply_markup=await kb.leave_arena())

@router.message(F.text == '–ü–æ–∫–∏–Ω—É—Ç—å —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ')
async def leave_competition(message: Message):
    user_id = message.from_user.id

    if user_id in active_players:
        game_to_exit = next(((user1, user2) for (user1, user2) in active_games if user_id in (user1, user2)), None)

        if game_to_exit:
            user1_id, user2_id = game_to_exit
            del active_games[game_to_exit]

            await message.answer("‚õìÔ∏è‚Äçüí•–í—ã –≤—ã—à–ª–∏ –∏–∑ –∏–≥—Ä—ã.‚õìÔ∏è‚Äçüí•", reply_markup=await kb.main())
            opponent_id = user2_id if user_id == user1_id else user1_id
            await bot.send_message(opponent_id, "üë§ –í–∞—à —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É.\n‚õìÔ∏è‚Äçüí•–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.‚õìÔ∏è‚Äçüí•", reply_markup=kb.main)

            active_players.discard(user1_id)
            active_players.discard(user2_id)
        else:
            await message.answer("‚õî–í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
    else:
        await message.answer("‚õî–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–∏.")

async def send_task(user1_id, user2_id, category):
    task = get_random_task(category)
    if not task:
        print(user2_id, "–û—à–∏–±–∫–∞: –∑–∞–¥–∞—á–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return
    active_games[(user1_id, user2_id)]["tasks"].append(task)

    try:

        await bot.send_photo(user1_id, task['question'], caption="–í–∞—à–∞ –∑–∞–¥–∞—á–∞:")
        await bot.send_photo(user2_id, task['question'], caption="–í–∞—à–∞ –∑–∞–¥–∞—á–∞:")
    except Exception as e:
        pass

def get_random_task(category):
    cursor.execute("SELECT id, photo, answer FROM photos WHERE materialcat = ? ORDER BY RANDOM() LIMIT 1;", (category,))
    result = cursor.fetchone()
    if result:
        return {"id": result[0], "question": result[1], "answer": result[2]}
    return None

@router.callback_query(F.data.startswith('leave_arena'))
async def nazad(callback: CallbackQuery):
    user_id = callback.from_user.id
    await callback.message.delete()

    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    removed = False
    for category, queue in waiting_queue.items():
        if user_id in queue:
            queue.remove(user_id)
            removed = True
            print(f"–ò–≥—Ä–æ–∫ {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.")
            break


    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_messages:
        for msg_id in user_messages[user_id]:
            try:
                await callback.message.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
            except Exception as e:
                pass
        user_messages[user_id] = []

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_message = await callback.message.answer('üö∑–ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ωüö∑', reply_markup=kb.zd)
    user_messages[user_id] = [callback.message.message_id, new_message.message_id]




